// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package types

type Enchantments []struct {
	// The category of enchantable items
	Category string `json:"category" yaml:"category" mapstructure:"category"`

	// Is a curse, not an enchantment
	Curse bool `json:"curse" yaml:"curse" mapstructure:"curse"`

	// Can this enchantment be discovered
	Discoverable bool `json:"discoverable" yaml:"discoverable" mapstructure:"discoverable"`

	// The display name of an enchantment
	DisplayName string `json:"displayName" yaml:"displayName" mapstructure:"displayName"`

	// List of enchantment not compatibles
	Exclude []string `json:"exclude" yaml:"exclude" mapstructure:"exclude"`

	// The unique identifier for an enchantment
	Id int `json:"id" yaml:"id" mapstructure:"id"`

	// Max cost equation's coefficients a * level + b
	MaxCost EnchantmentsElemMaxCost `json:"maxCost" yaml:"maxCost" mapstructure:"maxCost"`

	// The maximum level of an enchantment
	MaxLevel int `json:"maxLevel" yaml:"maxLevel" mapstructure:"maxLevel"`

	// Min cost equation's coefficients a * level + b
	MinCost EnchantmentsElemMinCost `json:"minCost" yaml:"minCost" mapstructure:"minCost"`

	// The name of an enchantment
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Can this enchantment be traded
	Tradeable bool `json:"tradeable" yaml:"tradeable" mapstructure:"tradeable"`

	// Can only be found in a treasure, not created
	TreasureOnly bool `json:"treasureOnly" yaml:"treasureOnly" mapstructure:"treasureOnly"`

	// Weight of the rarity of the enchantment
	Weight int `json:"weight" yaml:"weight" mapstructure:"weight"`
}

// Max cost equation's coefficients a * level + b
type EnchantmentsElemMaxCost struct {
	// A corresponds to the JSON schema field "a".
	A *int `json:"a,omitempty" yaml:"a,omitempty" mapstructure:"a,omitempty"`

	// B corresponds to the JSON schema field "b".
	B *int `json:"b,omitempty" yaml:"b,omitempty" mapstructure:"b,omitempty"`
}

// Min cost equation's coefficients a * level + b
type EnchantmentsElemMinCost struct {
	// A corresponds to the JSON schema field "a".
	A *int `json:"a,omitempty" yaml:"a,omitempty" mapstructure:"a,omitempty"`

	// B corresponds to the JSON schema field "b".
	B *int `json:"b,omitempty" yaml:"b,omitempty" mapstructure:"b,omitempty"`
}
