// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package types

import "encoding/json"
import "fmt"
import "reflect"

type Effects []struct {
	// The display name of an effect
	DisplayName string `json:"displayName" yaml:"displayName" mapstructure:"displayName"`

	// The unique identifier for an effect
	Id int `json:"id" yaml:"id" mapstructure:"id"`

	// The name of an effect
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Whether an effect is positive or negative
	Type EffectsElemType `json:"type" yaml:"type" mapstructure:"type"`
}

type EffectsElemType string

const EffectsElemTypeBad EffectsElemType = "bad"
const EffectsElemTypeGood EffectsElemType = "good"

var enumValues_EffectsElemType = []interface{}{
	"good",
	"bad",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *EffectsElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_EffectsElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_EffectsElemType, v)
	}
	*j = EffectsElemType(v)
	return nil
}
