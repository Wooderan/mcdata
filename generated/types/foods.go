// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package types

import "encoding/json"
import "fmt"

type Foods []struct {
	// The display name of an item
	DisplayName string `json:"displayName" yaml:"displayName" mapstructure:"displayName"`

	// The effective quality of the food item
	EffectiveQuality float64 `json:"effectiveQuality" yaml:"effectiveQuality" mapstructure:"effectiveQuality"`

	// The amount of food points the food item replenishes
	FoodPoints float64 `json:"foodPoints" yaml:"foodPoints" mapstructure:"foodPoints"`

	// The unique identifier for an item
	Id int `json:"id" yaml:"id" mapstructure:"id"`

	// The name of an item
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// The amount of saturation points the food  restores
	Saturation float64 `json:"saturation" yaml:"saturation" mapstructure:"saturation"`

	// The saturation ratio of the food item
	SaturationRatio float64 `json:"saturationRatio" yaml:"saturationRatio" mapstructure:"saturationRatio"`

	// Stack size for an item
	StackSize int `json:"stackSize" yaml:"stackSize" mapstructure:"stackSize"`

	// Variations corresponds to the JSON schema field "variations".
	Variations []FoodsElemVariationsElem `json:"variations,omitempty" yaml:"variations,omitempty" mapstructure:"variations,omitempty"`
}

type FoodsElemVariationsElem struct {
	// DisplayName corresponds to the JSON schema field "displayName".
	DisplayName string `json:"displayName" yaml:"displayName" mapstructure:"displayName"`

	// Metadata corresponds to the JSON schema field "metadata".
	Metadata int `json:"metadata" yaml:"metadata" mapstructure:"metadata"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *FoodsElemVariationsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["displayName"]; raw != nil && !ok {
		return fmt.Errorf("field displayName in FoodsElemVariationsElem: required")
	}
	if _, ok := raw["metadata"]; raw != nil && !ok {
		return fmt.Errorf("field metadata in FoodsElemVariationsElem: required")
	}
	type Plain FoodsElemVariationsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = FoodsElemVariationsElem(plain)
	return nil
}
