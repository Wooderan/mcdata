// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package types

import "encoding/json"
import "fmt"

type BlockLoot []struct {
	// The name of the block
	Block string `json:"block" yaml:"block" mapstructure:"block"`

	// The list of item drops
	Drops []BlockLootElemDropsElem `json:"drops" yaml:"drops" mapstructure:"drops"`

	// The states of the block (Bedrock Edition)
	States BlockLootElemStates `json:"states,omitempty" yaml:"states,omitempty" mapstructure:"states,omitempty"`
}

type BlockLootElemDropsElem struct {
	// The required age of the block for the item drop to occur
	BlockAge *float64 `json:"blockAge,omitempty" yaml:"blockAge,omitempty" mapstructure:"blockAge,omitempty"`

	// The percent chance of the item drop to occur
	DropChance float64 `json:"dropChance" yaml:"dropChance" mapstructure:"dropChance"`

	// The name of the item being dropped
	Item string `json:"item" yaml:"item" mapstructure:"item"`

	// The metadata of the item being dropped (Bedrock Edition)
	Metadata *int `json:"metadata,omitempty" yaml:"metadata,omitempty" mapstructure:"metadata,omitempty"`

	// If not having silk touch is required
	NoSilkTouch *bool `json:"noSilkTouch,omitempty" yaml:"noSilkTouch,omitempty" mapstructure:"noSilkTouch,omitempty"`

	// If silk touch is required
	SilkTouch *bool `json:"silkTouch,omitempty" yaml:"silkTouch,omitempty" mapstructure:"silkTouch,omitempty"`

	// The min/max of number of items in this item drop stack
	StackSizeRange []*float64 `json:"stackSizeRange" yaml:"stackSizeRange" mapstructure:"stackSizeRange"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BlockLootElemDropsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["dropChance"]; raw != nil && !ok {
		return fmt.Errorf("field dropChance in BlockLootElemDropsElem: required")
	}
	if _, ok := raw["item"]; raw != nil && !ok {
		return fmt.Errorf("field item in BlockLootElemDropsElem: required")
	}
	if _, ok := raw["stackSizeRange"]; raw != nil && !ok {
		return fmt.Errorf("field stackSizeRange in BlockLootElemDropsElem: required")
	}
	type Plain BlockLootElemDropsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BlockLootElemDropsElem(plain)
	return nil
}

// The states of the block (Bedrock Edition)
type BlockLootElemStates map[string]interface{}
