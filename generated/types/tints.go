// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package types

type Tints struct {
	// Constant corresponds to the JSON schema field "constant".
	Constant *TintsConstant `json:"constant,omitempty" yaml:"constant,omitempty" mapstructure:"constant,omitempty"`

	// Foliage corresponds to the JSON schema field "foliage".
	Foliage *TintsFoliage `json:"foliage,omitempty" yaml:"foliage,omitempty" mapstructure:"foliage,omitempty"`

	// Grass corresponds to the JSON schema field "grass".
	Grass *TintsGrass `json:"grass,omitempty" yaml:"grass,omitempty" mapstructure:"grass,omitempty"`

	// Redstone corresponds to the JSON schema field "redstone".
	Redstone *TintsRedstone `json:"redstone,omitempty" yaml:"redstone,omitempty" mapstructure:"redstone,omitempty"`

	// Water corresponds to the JSON schema field "water".
	Water *TintsWater `json:"water,omitempty" yaml:"water,omitempty" mapstructure:"water,omitempty"`
}

type TintsConstant struct {
	// Data corresponds to the JSON schema field "data".
	Data []TintsConstantDataElem `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Default corresponds to the JSON schema field "default".
	Default *int `json:"default,omitempty" yaml:"default,omitempty" mapstructure:"default,omitempty"`
}

type TintsConstantDataElem struct {
	// Color corresponds to the JSON schema field "color".
	Color *int `json:"color,omitempty" yaml:"color,omitempty" mapstructure:"color,omitempty"`

	// Keys corresponds to the JSON schema field "keys".
	Keys []string `json:"keys,omitempty" yaml:"keys,omitempty" mapstructure:"keys,omitempty"`
}

type TintsFoliage struct {
	// Data corresponds to the JSON schema field "data".
	Data []TintsFoliageDataElem `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Default corresponds to the JSON schema field "default".
	Default *int `json:"default,omitempty" yaml:"default,omitempty" mapstructure:"default,omitempty"`
}

type TintsFoliageDataElem struct {
	// Color corresponds to the JSON schema field "color".
	Color *int `json:"color,omitempty" yaml:"color,omitempty" mapstructure:"color,omitempty"`

	// Keys corresponds to the JSON schema field "keys".
	Keys []string `json:"keys,omitempty" yaml:"keys,omitempty" mapstructure:"keys,omitempty"`
}

type TintsGrass struct {
	// Data corresponds to the JSON schema field "data".
	Data []TintsGrassDataElem `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Default corresponds to the JSON schema field "default".
	Default *int `json:"default,omitempty" yaml:"default,omitempty" mapstructure:"default,omitempty"`
}

type TintsGrassDataElem struct {
	// Color corresponds to the JSON schema field "color".
	Color *int `json:"color,omitempty" yaml:"color,omitempty" mapstructure:"color,omitempty"`

	// Keys corresponds to the JSON schema field "keys".
	Keys []string `json:"keys,omitempty" yaml:"keys,omitempty" mapstructure:"keys,omitempty"`
}

type TintsRedstone struct {
	// Data corresponds to the JSON schema field "data".
	Data []TintsRedstoneDataElem `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Default corresponds to the JSON schema field "default".
	Default *int `json:"default,omitempty" yaml:"default,omitempty" mapstructure:"default,omitempty"`
}

type TintsRedstoneDataElem struct {
	// Color corresponds to the JSON schema field "color".
	Color *int `json:"color,omitempty" yaml:"color,omitempty" mapstructure:"color,omitempty"`

	// Keys corresponds to the JSON schema field "keys".
	Keys []int `json:"keys,omitempty" yaml:"keys,omitempty" mapstructure:"keys,omitempty"`
}

type TintsWater struct {
	// Data corresponds to the JSON schema field "data".
	Data []TintsWaterDataElem `json:"data,omitempty" yaml:"data,omitempty" mapstructure:"data,omitempty"`

	// Default corresponds to the JSON schema field "default".
	Default *int `json:"default,omitempty" yaml:"default,omitempty" mapstructure:"default,omitempty"`
}

type TintsWaterDataElem struct {
	// Color corresponds to the JSON schema field "color".
	Color *int `json:"color,omitempty" yaml:"color,omitempty" mapstructure:"color,omitempty"`

	// Keys corresponds to the JSON schema field "keys".
	Keys []string `json:"keys,omitempty" yaml:"keys,omitempty" mapstructure:"keys,omitempty"`
}
